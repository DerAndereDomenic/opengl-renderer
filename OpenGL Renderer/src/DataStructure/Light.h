#ifndef DATA_STRUCTURE_LIGHT_H
#define DATA_STRUCTURE_LIGHT_H

#include <glm/glm.hpp>
#include <OpenGLObjects/FrameBuffer.h>

/**
*	\brief A struct to model light
*/
class Light
{
	public:
		/**
		*	\brief Default constructor
		*/
		Light() = default;

		/**
		*	\brief Creates a light object
		*	\param[in] position The position of the light source
		*	\param[in] shadow_resx The x resolution of the shadow map
		*	\param[in] shadow_resy The y resolution of the shadow map
		*	\param[in] near The near plane
		*	\param[in] far The far plane
		*	\return The light object
		*/
		Light createObject(glm::vec3 position, unsigned int shadow_resx, unsigned int shadow_resy, float near, float far);

		/**
		*	\brief Destroys a light object
		*	\param[in] light The object to destroy
		*/
		void destroyObject(Light& light);

		//Member variables
		glm::vec3 position; /**<< The position of the light*/
		glm::vec3 ambient; /**<< The ambient strength of the light*/
		glm::vec3 diffuse; /**<< The diffuse strength of the light*/
		glm::vec3 specular; /**<< The specular strength of the light*/

		FrameBuffer shadow_map; /**<< The shadowmap generated by this lightsource*/
		glm::mat4 lightSpace; /**<< The light space matrix of this lightsource*/
		glm::mat4 lightView; /**<< The view matrix from this lightsource's perspective*/
		glm::mat4 lightProjection; /**<< The light projection matrix*/
};

#endif